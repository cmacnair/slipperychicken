;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;; Assignment 2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;; Russell Snyder ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;; Non-Real Time Systems ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;; April 2014 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-package :sc)

;;;nrev doesn't compile on my comp for some reason...
(load "/Applications/NonRealTime/clm-4/nrev.fasl") 

;;;These are the algorithms for this piece;
(load "/Users/russellsnyder/Russell_Stuff/_masters/_NonRealTime/03_Assignment2/RES_Algorithms_assignment2")

;;;This is the rhythm pallete
(load "/Users/russellsnyder/Russell_Stuff/_masters/_NonRealTime/03_Assignment2/RES_RhythmPallete_Asssignment2")

;;range doesn't matter as not intended for human play
;;but I want to retain the leap countour

(loop for data in
      '(('flute)
	('alto-sax)
	('tenor-sax)
	('baritone-sax)
	('computer)
	do
	(set-slot 'lowest-written 'c-1 (first data) 
		  +slippery-chicken-standard-instrument-palette+)
	(set-slot 'highest-written 'c10 (first data) 
		  +slippery-chicken-standard-instrument-palette+)
	(set-slot 'microtones 't (first data) 
		  +slippery-chicken-standard-instrument-palette+)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;Start Composition Here;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(let* ((assignment2
        (make-slippery-chicken
         '+assignment2+
	 ;; midi instruments picked to limit large leaps
         :ensemble '(((voice1 ((flute) :midi-channel 1 
			    :microtones-midi-channel 2))
                      (voice2 ((flute) :midi-channel 3  
			    :microtones-midi-channel 4))
                      (voice3 ((alto-sax) :midi-channel 5 
			    :microtones-midi-channel 6))
                      (voice4 ((tenor-sax) :midi-channel 8 
			   :microtones-midi-channel 9))
                      (voice5 ((tenor-sax) :midi-channel 11 
			     :microtones-midi-channel 12))
		      (voice6 ((tenor-sax) :midi-channel 13 
				 :microtones-midi-channel 14))
		      (voice7 ((tenor-sax) :midi-channel 15 
				 :microtones-midi-channel 16))
		      ))
       	 :set-limits-high (loop for data in
				'(voice1 voice2 voice3 voice4
					 voice5 voice6 voice7)
				collect (list 
					 data (flatten
					       `((1 c10) 
						 ,(limit-down 2 25 264 144 1)
						 ,(limit-up 26 47 144 264 1)
						 (48 c10)
						 ;micro-palletes 1
						 ,(limit-down 251 280 264 180 1) 
						 ,(limit-up 280 300 181 264 1)
						 ,(limit-down 332 340 264 150 1)
						 ,(limit-down 341 348 264 150 1)
						 ,(limit-down 348 368 264 150 1)
						 (369 c10) ;; climax shaping
						 ;; slow shape
						 ,(limit-down 600 800 264 150 1)
						 ,(limit-up 801 900 150 264 1)
						 ;; fast shape
						 ,(limit-down 1101 1200 264 150 
							      1)
						 ,(limit-up 1201 1300 150 264 1)
						 (1301 c10)
						 (1349 c10)))))

	 :set-limits-low (loop for data in
				'(voice1 voice2 voice3 voice4
					 voice5 voice6 voice7)
				collect (list 
					 data (flatten
					       `((1 c-1) 
						 ,(limit-up 68 100 2 144 1)
						 (101 c-1)
						 ;micro-palletes 1
						 ,(limit-up 233 250 1 144 1)
						 (251 c-1)
						 ,(limit-up 315 321 1 144 1)
						 ,(limit-up 322 331 1 144 1)
						 (332 c-1) ;; climax shaping
						 ;; slow shape
						 ,(limit-up 900 1000 1 144 1)
						 (1001 c-1)
						 ;; fast shape
						 ,(limit-up 1301 1330 1 144 1)
						 ,(limit-up 1331 1340 1 144 1)
						 (1341 c-1)
						 (1349 c-1)))))
	 
         :set-palette (loop for data in
			    '((1 2 0)
			      (2 2 1)
			      (3 1 0)
			      ;repeat for 4-29
			      (4 2 0)
			      (5 2 1)
			      (6 1 0)
			      (7 2 0)
			      (8 2 1)
			      (9 1 0)
			      (10 2 0)
			      (11 2 0)
			      (12 2 1)
			      (13 1 0)
			      (14 2 0)
			      (15 2 1)
			      (16 1 0)
			      (17 2 0)
			      (18 2 1)
			      (19 1 0)
			      (20 2 0)
			      (21 2 1)
			      (22 1 0)
			      (23 2 0)
			      (24 2 1)
			      (25 1 0)
			      (26 1 0)
			      (27 2 0)
			      (28 2 1)
			      (29 1 0)
			      ;new section
			      (30 3.14 0)
			      (31 3.14 1)
			      (32 3.14 4)
			      (33 3.14 5)
			      ;repeat 34-39
			      (34 3.14 0)
			      (35 3.14 1)
			      (36 3.14 4)
			      (37 3.14 5)
			      (38 3.14 0)
			      (39 3.14 1)
			      (40 4 0)
			      (41 4 1)
			      (42 4 2)
			      (43 4 3)
			      (44 4 0)
			      (45 4 1)
			      (46 4 2)
			      (47 4 3)
			      (48 4 0)
			      (49 4 1)
			      ;new section
			      (50 5 0)
			      (51 5 1)
			      (52 5 2)
			      (53 5 3)
			      (54 5 4)
			      ;repeat for 55-59
			      (55 5 0)
			      (56 5 1)
			      (57 5 2)
			      (58 5 3)
			      (59 5 4)
			      ;new section
			      (60 6 0)
			      (61 6 1)
			      (62 6 2)
			      (63 6 3)
			      (64 6 4)
			      (65 6 5)
			      (66 6 6)
			      (67 6 7)
			      (68 6 8)
			      (69 6 8)
			      (70 7 0)
			      (71 7 1)
			      (72 7 2)
			      (73 7 3)
			      (74 7 4)
			      (75 7 5)
			      (76 7 6)
			      (77 7 6)
			      (78 7 6)
			      (79 7 6)
			      (80 8 0)
			      (81 8 1)
			      (82 8 3)
			      (83 8.3 0)
			      (84 8.3 1)
			      (85 8.3 3)
			      (86 8.6 0)
			      (87 8.6 1)
			      (88 8.6 3)
			      (89 8.6 2)
			      (90 3 0)
			      (91 3 1)
			      (92 3 2)
			      (93 3 3)
			      (94 3 4)
			      (95 3 5)
			      (96 3 6)
			      (97 3 7)
			      (98 3 8))
			    collect
			    `(,(first data) 
			      ,(list 
				(split-scale (second data) (third data) 0 10))))

         :set-map `((1 
		     ,(append 
		       (fibonacci-transitions 
			100 
			(append 
			 (loop for i from 1 to 3 collect i)
			 (loop for i from 30 to 33 collect i)
			 '(32 33 40 42)
			 (loop for i from 40 to 43 collect i)
			 )) ;measure 100
		       (loop repeat 30 collect 3) ;to measure 130
		       (fibonacci-transitions
			100
			(append
			 (loop for i from 80 to 88 by 2 collect i)
			 (loop for i from 81 to 87 by 2 collect i)))
		       '(87 87) ;to measure 231
		       (flatten (loop 
				 repeat 7 collect 
				 (append 
				  (loop 
				   for i from 90 to 98 collect i) 
				  (loop 
				   for i from 98 downto 90 collect i)))) ;339
		       (loop for i from 60 to 67 collect i)
		       '(98 98 96) ;to measure 350
		       (inefficiently-permutate 
			(append 
			 (loop for i from 2 to 98 by 2 collect i) 
			 (loop for i from 97 downto 1 by 2 collect i)) 
			:max 11 :skip 1))))
	 :tempo-map (append (deccel 1 10 200 80 1) (accel 12 19 80 300 1)
			    '((20 (q 120)))
			    (accel 25 30 120 180 1) (accel 31 35 180 300 1)
			    '((36 (q 120)))
			    (accel 38 50 120 240 2) (accel 39 51 100 300 2)
			    '((52 (q 240)))
			    (deccel 55 59 240 180 1) (deccel 60 64 170 80 1)
			    '((65 (q 240)))
			    (accel 68 80 240 300 3) (deccel 69 81 250 230 3)
			    (accel 70 82 220 280 3)
			    (accel 83 90 100 240 1)
			    '((91 (q 240)))
			    (accel 100 130 240 380 1)
			    '((140 (q 240)))
			    (accel 141 170 240 340 2) (deccel 142 171 240 140 2)
			    '((172 (q 240)))
			    (accel 173 200 240 300 5) (deccel 174 201 240 140 5)
			    (accel 175 202 240 241 5)
			    '((203 (q 240)))
			    (deccel 210 214 240 100 1) (accel 215 220 110 240 1)
			    (deccel 221 224 260 80 1)
			    '((228 (q 120)))  ; micropalletes
			    (accel 233 240 18 60 1) (deccel 241 250 50 17 1)
			    (accel 251 259 15 25 1) (deccel 260 269 80 10 1)
			    (accel 270 275 17 70 1) (accel 276 280 20 80 1)
			    '((281 (q 80)))
			    (deccel 285 300 170 20 3) (deccel 286 301 130 10 3)
			    (accel 287 302 20 170 3)
			    (deccel 303 310 100 50 1) (deccel 311 320 120 40 1)
			    (deccel 321 330 140 30 1) (deccel 331 340 160 20 1)
			    (deccel 341 345 180 15 1) (deccel 346 350 200 100 1)
			    (accel 351 400 10 100 1)
			    (accel 401 500 501 1000 1) 
			    (deccel 1001 1319 1000 120 1)
			    (accel 1320 1340 120 530 1) (deccel 1341 1348 150 15 1)
			    ) 
	 :rthm-seq-palette *rthm-seq-palette-RES-assignment2* 
	 :rthm-seq-map `((1 
			  ((voice1
			    ,(append
			      (fibonacci-transitions 
			       100 '(1000 rest18 rest18 1003 1004 
					  rest44 rest44 1007 1001
					  1000))
			      (fibonacci-transitions 
			       30 (loop for i from 1 to 10 collect i))
			      (fibonacci-transitions 
			       100 '(1 rest44 rest44 301 401 501
				       2 102 rest44 302 rest44 502
				       3 103 203 303 rest44 503))
			      '(rest44 rest44) ; up to 232: micro-palletes
			      (loop for i from 1001 to 1049 collect i)
			      (loop for i from 1120 to 1139 collect i)
			      '(rest18 rest18 rest18)
			      (loop for i from 1049 downto 1001 collect i)
			      (loop for i from 1120 to 1132 collect i)
			      '(rest18 rest18 rest18 rest18)
			      (flatten 
			       (remix-in 
				(fibonacci-transitions 
				 639 
				 `,(append
				    (loop repeat 10 collect '(rest18))
				    (loop for i from 1000 to 1024 collect i) 
				    (loop repeat 10 collect '(rest18))
				    (loop for i from 1025 to 1049 collect i)
				    (loop repeat 10 collect '(rest18))
				    '(rest18)))))))
			     (voice2
			      ,(append
				(fibonacci-transitions 
				 100 '(rest18 1001 rest18 rest18 1006 
					    rest44 rest44 1003 rest18
					    rest18))
				'(rest44 rest44)
				(fibonacci-transitions 
				 28 (loop for i from 15 to 19 collect i))
				(fibonacci-transitions 
				 100 '(11 111 211 311 rest44 rest44
					  12 112 212 rest44 412 512
					  13 113 213 313 rest44 513))
				'(rest44 rest44) ; up to 232: micro-palletes
				(loop for i from 1101 to 1149 collect i)
				(loop for i from 1120 to 1139 collect i)
				'(rest18 rest18 rest18)
				(loop for i from 1149 downto 1101 collect i)
				(loop for i from 1121 to 1135 collect i)
				(flatten 
				 (remix-in 
				  (fibonacci-transitions 
				   704 
				   `,(append
				      (loop repeat 2 collect '(rest18))
				      (loop for i from 1201 to 1220 collect i) 
				      (loop repeat 10 collect '(rest18))
				      (loop for i from 1249 downto 1221 collect 
					    i)
				      (loop repeat 10 collect '(rest18))
				      (loop for i from 1201 to 1220 collect i)
				      '(rest18)))))))
			     (voice3
			      ,(append
				(fibonacci-transitions 
				 100 '(rest18 rest18 1002 rest18 rest18 
					    rest44 rest44 1007 rest18
					    rest18))
				'(rest44 rest44 rest44 rest44)
				(fibonacci-transitions 
				 26 (loop for i from 10 to 19 by 2 collect i))
				(fibonacci-transitions 
				 100 '(rest44 rest44 rest44 321 421 521
					      32 132 rest44 rest44 rest44 532
					      43 143 rest44 343 443 543))
				'(rest44 rest44) ; up to 232: micro-palletes
				(loop for i from 1201 to 1249 collect i)
				(loop for i from 1120 to 1139 collect i)
				'(rest18 rest18 rest18)
				(loop for i from 1249 downto 1201 collect i)
				(loop for i from 1120 to 1133 collect i)
				'(rest18 rest18)
				(flatten 
				 (remix-in 
				  (fibonacci-transitions 
				   628 
				   `,(append
				      (loop repeat 5 collect '(rest18))
				      (loop for i from 1000 to 1049 by 2 
					    collect i) 
				      (loop repeat 5 collect '(rest18))
				      (loop for i from 1049 downto 1000 by 2 
					    collect i)
				      (loop repeat 5 collect '(rest18))
				      '(rest18)))))))
			     (voice4 
			      ,(append 
				(fibonacci-transitions 
				 100 '(rest18 rest18 rest18 1003 rest18 
					    2 1 rest18 rest18 
					    rest18))
				(loop repeat 10 collect 'rest44)
				(fibonacci-transitions 
				 20 (loop for i from 5 to 19 by 3 collect i))
				(fibonacci-transitions 
				 100 '(42 141 241 342 441 541
					  32 rest44 rest44 312 412 513
					  19 118 rest44 rest44 rest44 518))
				'(rest44 rest44) ; up to 232: micro-palletes
				(loop for i from 1301 to 1349 collect i)
				(loop for i from 1120 to 1139 collect i)
				'(rest18 rest18 rest18)
				(loop for i from 1349 downto 1301 collect i)
				(loop for i from 1120 to 1132 collect i)
				'(rest18 rest18 rest18 rest18 rest18)
				'(rest18 rest18 rest18 rest18);added 1
				(flatten ;; gets 979
				 (remix-in 
				  (fibonacci-transitions 
				   614 
				   `,(append
				      (loop repeat 2 collect '(rest18))
				      (loop for i from 1301 to 1340 collect 
					    i) 
				      (loop repeat 10 collect '(rest18))
				      (loop for i from 1349 downto 1301 by 2 
					    collect i)
				      (loop repeat 10 collect '(rest18))
				      (loop for i from 1201 to 1220 collect i)
				      ))))))
			     (voice5
			      ,(append
				(fibonacci-transitions 
				 100 '(rest18 rest18 rest18 rest18 1004 
					    rest44 rest44 rest18 rest18
					    1001))
				(loop repeat 5 collect 'rest44)
				(fibonacci-transitions 
				 25 (loop for i from 2 to 19 by 5 collect i))
				(fibonacci-transitions 
				 100 '(40 140 239 339 439 539
					  rest44 rest44 212 310 410 511
					  19 117 rest44 316 rest44 516))
				'(rest44 rest44) ; up to 232: micro-palletes
				(loop for i from 1401 to 1449 collect i)
				(loop for i from 1120 to 1139 collect i)
				'(rest18 rest18 rest18)					     
				(loop for i from 1449 downto 1401 collect i)
				(loop for i from 1121 to 1133 collect i)
				'(rest18 rest18 rest18)
				(flatten 
				 (remix-in 
				  (fibonacci-transitions 
				   654 
				   `,(append
				      (loop repeat 20 collect '(rest18))
				      (loop for i from 1401 to 1449 collect i) 
				      (loop repeat 20 collect '(rest18))
				      (loop repeat 10 collect '(rest18))
				      (loop for i from 1201 to 1220 collect i)
				      ))))))
			     (voice6 
			      ,(append
				(fibonacci-transitions 
				 100 '(rest18 rest18 rest18 rest18 rest18 
					    rest44 rest44 rest18 rest18 
					    1000))
				(loop repeat 15 collect 'rest44)
				(fibonacci-transitions 
				 15 (loop for i from 1 to 19 by 4 collect i))
				(fibonacci-transitions 
				 100 '(42 131 221 rest44 405 505
					  rest44 rest44 222 312 406 506
					  21 rest44 221 320 rest44 520))
				'(rest44 rest44) ; up to 232: micro-palletes
				(loop for i from 1501 to 1549 collect i)
				(loop for i from 1120 to 1139 collect i)
				'(rest18 rest18 rest18)
				(loop for i from 1549 downto 1501 collect i)
				(loop for i from 1121 to 1133 collect i)
				'(rest18 rest18 rest18)
				 (flatten 
				  (remix-in 
				   (fibonacci-transitions 
				    698 
				    `,(append
				       (loop repeat 19 collect '(rest18))
				       (loop for i from 1501 to 1549 collect i) 
				       (loop repeat 21 collect '(rest18))
				       (loop repeat 10 collect '(rest18))
				       (loop for i from 1501 to 1520 collect i)
				       ))))))
			      (voice7 
			      ,(append 
				(fibonacci-transitions 
				 100 '(rest18 rest18 rest18 play18 rest18 
					      rest44 rest44 rest18 rest18 
					      play18))
				(loop repeat 7 collect 'rest44)
				(fibonacci-transitions 
				 23 (loop for i from 13 to 19 collect i))
				(fibonacci-transitions 
				 100 '(41 102 241 341 402 501
					  42 102 202 302 402 502
					  43 rest44 202 rest44 442 543))
				'(301 rest44)
				(loop for i from 1501 to 1549 collect i)
				(loop for i from 1120 to 1139 collect i)
				'(rest18 rest18 rest18)
				(loop for i from 1549 downto 1501 collect i)
				(loop for i from 1120 to 1132 collect i)
				'(rest18 rest18 rest18 rest18)
				(flatten 
				 (remix-in 
				  (fibonacci-transitions 
				   612 
				   `,(append 
				      (loop for i from 1101 to 1124 collect i) 
				      (loop repeat 10 collect '(rest18))
				      (loop for i from 1125 to 1149 collect i)
				      (loop repeat 10 collect '(rest18))
				      '(rest18)))))))
			      )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;Output Settings/Options ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	 :snd-output-dir "/Users/russellsnyder/Russell_Stuff/_masters/_NonRealTime/03_Assignment2/AudioFileGen"
	 :sndfile-palette 
	 '(((Sine
	     ((RES_SineWave_High.aif :frequency d6 :amplitude 0.3)
	      (RES_SineWave_Low.aif :frequency b5 :amplitude 0.3)
	      (WaveMeditation_01.aif :frequency b5))))
	   ("/Users/russellsnyder/Russell_Stuff/_masters/_NonRealTime/03_Assignment2/Sound_files")))))
  (midi-play assignment2 
	     :midi-file 
	     "/Users/russellsnyder/Russell_Stuff/_masters/_NonRealTime/03_Assignment2/MidiFileGen/Assignment2.mid")
  (cmn-display assignment2)
  (clm-play assignment2 1 '(voice1) 'Sine :pitch-synchronous t
	    :inc-start t :duration-scaler 1.0 :ignore-rests nil))
